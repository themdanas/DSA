class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        sol,res=[],[]

        def backtracking(openn, close):
            if len(sol)==2*n:
                res.append(''.join(sol))
                return

            if openn<n:
                sol.append('(')
                backtracking(openn+1,close)
                sol.pop()

            if openn>close:
                sol.append(')')
                backtracking(openn,close+1)
                sol.pop()

        backtracking(0,0)
        return res
            